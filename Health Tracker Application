import tkinter as tk
from tkinter import messagebox, ttk
import json
import datetime

# File to store health data
DATA_FILE = "health_data.json"

# Load existing data or create a new file
def load_data():
    try:
        with open(DATA_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"weight_log": [], "exercise_log": [], "water_intake_log": []}

def save_data(data):
    with open(DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)

# Initialize data storage
health_data = load_data()

def log_weight():
    try:
        weight = float(weight_entry.get())
        height_m = 0
        if height_unit.get() == "Meters":
            height_m = float(height_entry.get())
        else:
            height_ft = float(height_entry.get())
            height_m = height_ft * 0.3048  # Convert feet to meters
        
        bmi = round(weight / (height_m ** 2), 2)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        health_data["weight_log"].append({"weight": weight, "BMI": bmi, "timestamp": timestamp})
        save_data(health_data)
        messagebox.showinfo("Success", f"Weight logged: {weight} kg | BMI: {bmi}")
    except ValueError:
        messagebox.showerror("Error", "Please enter valid numbers!")

def log_exercise():
    try:
        exercise = exercise_entry.get()
        duration = int(duration_entry.get())
        calories = int(calories_entry.get())
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        health_data["exercise_log"].append({"exercise": exercise, "duration": duration, "calories": calories, "timestamp": timestamp})
        save_data(health_data)
        messagebox.showinfo("Success", f"Exercise logged: {exercise} for {duration} min | Calories burned: {calories}")
    except ValueError:
        messagebox.showerror("Error", "Please enter valid numbers!")

def log_water_intake():
    try:
        amount = float(water_entry.get())
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        health_data["water_intake_log"].append({"amount": amount, "timestamp": timestamp})
        save_data(health_data)
        messagebox.showinfo("Success", f"Water intake logged: {amount} liters")
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid number!")

def show_logs():
    logs_window = tk.Toplevel(root)
    logs_window.title("Health Logs")
    logs_window.geometry("600x400")

    notebook = ttk.Notebook(logs_window)
    notebook.pack(expand=True, fill="both")

    # Weight Log Tab
    weight_tab = ttk.Frame(notebook)
    notebook.add(weight_tab, text="Weight Log")

    weight_tree = ttk.Treeview(weight_tab, columns=("Date", "Weight", "BMI"), show="headings")
    weight_tree.heading("Date", text="Date")
    weight_tree.heading("Weight", text="Weight (kg)")
    weight_tree.heading("BMI", text="BMI")
    weight_tree.pack(expand=True, fill="both")

    for entry in health_data["weight_log"]:
        weight_tree.insert("", "end", values=(entry["timestamp"], entry["weight"], entry["BMI"]))

    def delete_weight_entry():
        selected_item = weight_tree.selection()
        if selected_item:
            item_values = weight_tree.item(selected_item, "values")
            health_data["weight_log"] = [entry for entry in health_data["weight_log"] if entry["timestamp"] != item_values[0]]
            save_data(health_data)
            weight_tree.delete(selected_item)
            messagebox.showinfo("Success", "Entry deleted successfully!")

    tk.Button(weight_tab, text="Delete Entry", command=delete_weight_entry).pack(pady=5)

    # Exercise Log Tab
    exercise_tab = ttk.Frame(notebook)
    notebook.add(exercise_tab, text="Exercise Log")

    exercise_tree = ttk.Treeview(exercise_tab, columns=("Date", "Exercise", "Duration", "Calories"), show="headings")
    exercise_tree.heading("Date", text="Date")
    exercise_tree.heading("Exercise", text="Exercise Type")
    exercise_tree.heading("Duration", text="Duration (min)")
    exercise_tree.heading("Calories", text="Calories Burned")
    exercise_tree.pack(expand=True, fill="both")

    for entry in health_data["exercise_log"]:
        exercise_tree.insert("", "end", values=(entry["timestamp"], entry["exercise"], entry["duration"], entry["calories"]))

    # Water Log Tab
    water_tab = ttk.Frame(notebook)
    notebook.add(water_tab, text="Water Intake Log")

    water_tree = ttk.Treeview(water_tab, columns=("Date", "Amount"), show="headings")
    water_tree.heading("Date", text="Date")
    water_tree.heading("Amount", text="Water (Liters)")
    water_tree.pack(expand=True, fill="both")

    for entry in health_data["water_intake_log"]:
        water_tree.insert("", "end", values=(entry["timestamp"], entry["amount"]))

# UI Update
root = tk.Tk()
root.title("Health Tracker")
root.geometry("400x500")

# Weight & BMI Section
tk.Label(root, text="Weight (kg):").pack()
weight_entry = tk.Entry(root)
weight_entry.pack()

tk.Label(root, text="Height:").pack()
height_entry = tk.Entry(root)
height_entry.pack()

height_unit = tk.StringVar(value="Meters")
unit_menu = ttk.Combobox(root, textvariable=height_unit, values=["Meters", "Feet"])
unit_menu.pack()

tk.Button(root, text="Log Weight & BMI", command=log_weight).pack(pady=5)

# Exercise Section
tk.Label(root, text="Exercise Type:").pack()
exercise_entry = tk.Entry(root)
exercise_entry.pack()

tk.Label(root, text="Duration (minutes):").pack()
duration_entry = tk.Entry(root)
duration_entry.pack()

tk.Label(root, text="Calories Burned:").pack()
calories_entry = tk.Entry(root)
calories_entry.pack()

tk.Button(root, text="Log Exercise", command=log_exercise).pack(pady=5)

# Water Intake Section
tk.Label(root, text="Water Intake (liters):").pack()
water_entry = tk.Entry(root)
water_entry.pack()

tk.Button(root, text="Log Water Intake", command=log_water_intake).pack(pady=5)

tk.Button(root, text="Show Logs", command=show_logs, bg="lightblue").pack(pady=10)

# Run the app
root.mainloop()
